import telebot
import gspread
import json
from oauth2client.service_account import ServiceAccountCredentials
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from dotenv import load_dotenv
import os

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
service_account_info = os.getenv("GOOGLE_SERVICE_ACCOUNT_JSON")

# –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É JSON –≤ —Å–ª–æ–≤–∞—Ä—å
creds_dict = json.loads(service_account_info)

# ==== –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google Sheets ====
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
client = gspread.authorize(creds)

# –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
try:
    spreadsheet = client.open("Student Certificates")
    students_sheet = spreadsheet.worksheet("students")
    certificates_sheet = spreadsheet.worksheet("certificates")
except gspread.SpreadsheetNotFound:
    raise ValueError("–¢–∞–±–ª–∏—Ü–∞ 'Student Certificates' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
except Exception as e:
    raise ValueError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ç–∞–±–ª–∏—Ü—ã: {e}")

TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    raise ValueError("NO TOKEN")

bot = telebot.TeleBot(TOKEN)

# –°–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
ADMIN_IDS = os.getenv("ADMIN_IDS").split(",")

# ==== –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ====
def main_menu():
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton("–ó–∞–≥—Ä—É–∑–∏—Ç—å –≥—Ä–∞–º–æ—Ç—É üìú"))
    markup.add(KeyboardButton("–ú–æ–∏ –≥—Ä–∞–º–æ—Ç—ã üìÇ"))
    return markup

# ==== –ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ====
def admin_menu():
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton("–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–æ–∫ üìù"))
    markup.add(KeyboardButton("–ü—Ä–æ—Å–º–æ—Ç—Ä –≥—Ä–∞–º–æ—Ç üìú"))
    return markup

# ==== –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ====
def is_admin(user_id):
    return str(user_id) in ADMIN_IDS

# ==== –°—Ç–∞—Ä—Ç –±–æ—Ç–∞ ====
@bot.message_handler(commands=['start'])
def start(message):
    user_id = str(message.chat.id)
    records = students_sheet.get_all_records()

    if is_admin(user_id):
        bot.send_message(user_id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!", reply_markup=admin_menu())
        return

    for row in records:
        if str(row["ID"]) == user_id:
            if row["status"] == "approved":
                bot.send_message(user_id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=main_menu())
            else:
                bot.send_message(user_id, "–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
            return

    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    bot.register_next_step_handler(message, get_name)

# ==== –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ====
def get_name(message):
    user_id = str(message.chat.id)
    name = message.text
    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –ø–æ—á—Ç—É:")
    bot.register_next_step_handler(message, get_email, name)

def get_email(message, name):
    user_id = str(message.chat.id)
    email = message.text
    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–ª–∞—Å—Å:")
    bot.register_next_step_handler(message, get_class, name, email)

def get_class(message, name, email):
    user_id = str(message.chat.id)
    class_name = message.text

    students_sheet.append_row([user_id, name, email, class_name, "pending"])
    bot.send_message(user_id, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.")
    
    for admin_id in ADMIN_IDS:
        bot.send_message(admin_id, f"–ù–æ–≤—ã–π —É—á–µ–Ω–∏–∫: {name}\n–ö–ª–∞—Å—Å: {class_name}\nID: {user_id}",
                         reply_markup=InlineKeyboardMarkup().add(
                             InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"approve_{user_id}")
                         ))

# ==== –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ====
@bot.callback_query_handler(func=lambda call: call.data.startswith("approve_"))
def approve_student(call):
    user_id = call.data.split("_")[1]

    data = students_sheet.get_all_values()
    for i, row in enumerate(data):
        if row[0] == user_id:
            students_sheet.update_cell(i + 1, 5, "approved")
            bot.send_message(user_id, "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!", reply_markup=main_menu())
            bot.send_message(call.message.chat.id, "–£—á–µ–Ω–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!")
            return

# ==== –ó–∞–≥—Ä—É–∑–∫–∞ –≥—Ä–∞–º–æ—Ç ====
@bot.message_handler(content_types=['document'])
def upload_certificate(message):
    user_id = str(message.chat.id)
    file_id = message.document.file_id

    if is_admin(user_id):
        bot.send_message(user_id, "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –Ω–µ –º–æ–≥—É—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å –≥—Ä–∞–º–æ—Ç—ã.")
        return

    records = students_sheet.get_all_records()

    for row in records:
        if str(row["ID"]) == user_id and row["status"] == "approved":
            try:
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É
                certificates_sheet.append_row([user_id, row["name"], row["class"], file_id, "pending"])
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–æ–∫–∏
                row_index = len(certificates_sheet.get_all_values())

                bot.send_message(user_id, "–ì—Ä–∞–º–æ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.")

                for admin_id in ADMIN_IDS:
                    bot.send_message(
                        admin_id, 
                        f"–ù–æ–≤–∞—è –≥—Ä–∞–º–æ—Ç–∞ –æ—Ç {row['name']} (ID: {user_id})",
                        reply_markup=InlineKeyboardMarkup().add(
                            InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"approve_cert_{row_index}")
                        )
                    )
                return
            except Exception as e:
                bot.send_message(user_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É.")
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏: {e}")
                return

    bot.send_message(user_id, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏–ª–∏ –æ–∂–∏–¥–∞–µ—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")

# ==== –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≥—Ä–∞–º–æ—Ç ====
@bot.callback_query_handler(func=lambda call: call.data.startswith("approve_cert_"))
def approve_certificate(call):
    row_index = int(call.data.split("_")[2])  # –ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–æ–∫–∏ —Å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–º
    
    try:
        certificates_sheet.update_cell(row_index, 5, "approved")  # –ö–æ–ª–æ–Ω–∫–∞ "status"
        
        # –ü–æ–ª—É—á–∞–µ–º ID —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
        student_id = certificates_sheet.cell(row_index, 1).value
        bot.send_message(student_id, "–í–∞—à–∞ –≥—Ä–∞–º–æ—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! ‚úÖ")
        bot.send_message(call.message.chat.id, "–ì—Ä–∞–º–æ—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!")

    except Exception as e:
        bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏.")
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: {e}")

# ==== –ü—Ä–æ—Å–º–æ—Ç—Ä –≥—Ä–∞–º–æ—Ç ====
@bot.message_handler(func=lambda message: message.text == "–ú–æ–∏ –≥—Ä–∞–º–æ—Ç—ã üìÇ")
def my_certificates(message):
    user_id = str(message.chat.id)
    records = certificates_sheet.get_all_records()
    found = False

    for row in records:
        if str(row["ID"]) == user_id and row["status"] == "approved":
            bot.send_document(user_id, row["file_id"])
            found = True

    if not found:
        bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –≥—Ä–∞–º–æ—Ç.")

# ==== –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ====
bot.polling(timeout=30)
